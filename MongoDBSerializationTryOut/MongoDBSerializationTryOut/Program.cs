using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;
using MongoDB.Bson;
using MongoDB.Bson.Serialization;
using MongoDB.Bson.Serialization.Conventions;
using MongoDB.Bson.Serialization.IdGenerators;
using MongoDB.Driver;
using MongoDB.Driver.Builders;

namespace MongoDBSerializationTryOut
{
    class Program
    {
        static void Main(string[] args)
        {
            SerializionConfig.Configure();

            var client = new MongoClient();
            var server = client.GetServer();
            var db = server.GetDatabase("foo");
            var collection = db.GetCollection<Person>("people");
            collection.RemoveAll();
            collection.Insert(new Person("Tugberk"));
            var person = collection.FindOne(Query<Person>.EQ(p => p.Name, "Tugberk"));
        }
    }

    public static class SerializionConfig
    {
        public static void Configure()
        {
            // General conventions
            var pack = new ConventionPack { new CamelCaseElementNameConvention(), new IgnoreIfNullConvention(false) };
            ConventionRegistry.Register("all", pack, t => true);

            // Used for reference types, checks and throws if the Id will end up null.
            BsonSerializer.UseNullIdChecker = true;

            // We won't use this unfortunately as we want to have the Id immediently.
            // BsonSerializer.RegisterIdGenerator(typeof(string), StringObjectIdGenerator.Instance);

            BsonClassMap.RegisterClassMap<Person>(cm =>
            {
                cm.AutoMap();
                cm.MapCreator(p => new Person(p.Name, p.Category));
                cm.GetMemberMap(c => c.Id).SetRepresentation(BsonType.ObjectId);
                cm.SetIdMember(cm.GetMemberMap(c => c.Id));
                cm.UnmapProperty(c => c.IgnoreField);

                // As we say that every string Id is generated by StringObjectIdGenerator.Instance, this is not necessary here.
                // cm.IdMemberMap.SetIdGenerator(StringObjectIdGenerator.Instance);
            });
        }
    }

    public class Person
    {
        public Person(string name) : this(name, null)
        {
        }

        public Person(string name, string category)
        {
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }

            Id = ObjectId.GenerateNewId().ToString();
            Name = name;
            Category = category;
        }

        public string Id { get; private set; }
        public string Name { get; private set; }
        public string Category { get; private set; }
        public string IgnoreField { get; private set; }
    }
}
